pipeline {
    agent any
   
    environment {
        image_backend = "currency-converter-backend"
        image_frontend = "currency-converter-frontend"
        user_docker = "rcventura"
        MYSQL_ROOT_PASSWORD="Rafa81041683!"
        MYSQL_ROOT_HOST="%"
        MYSQL_DATABASE="currency-converterdb"
        MYSQL_USER="admindb"
        MYSQL_PASSWORD="Rafa81041683!!"
        MYSQL_HOST="localhost"
        MYSQL_PORT="3306"
    }

    stages {

        stage('Build e Push Docker Image Backend') {
            steps {
                script {
                    def imageBackend = "${user_docker}/${image_backend}:${env.BUILD_ID}"
                    def backendCustom_image = docker.build(imageBackend,"-f /docker/Dockerfile-backend .")
                    
                    backendCustom_image.push()
                    backendCustom_image.push('latest')
                }
            }
        }
         stage('Build e Push Docker Image Frontend') {
            steps {
                script {
                    def imageFrontend = "${user_docker}/${image_frontend}:${env.BUILD_ID}"
                    def frontendCustom_image = docker.build(imageFrontend,"-f docker/dockerfile-frontend .")
                    
                    frontendCustom_image.push()
                    frontendCustom_image.push('latest')
                }
            }
        }
        //stage("Run Tests Backend"){
          //  steps {
            //    retry(3){
              //  bat 'mvn clean test -Dspring.profiles.active=dev' 
        
            stage('Deploy Kubernetes') {
                environment {
                    tag_version = "${env.BUILD_ID}"
                }
            steps {
                script {
                    withKubeConfig ([credentialsId: 'kubeconfig']){
                    sh 'sed -i "s/{{TAG}}/tag_version/g" ./k8s/deployment.yml'
                    sh 'kubectl apply -f ./k8s/deploymnet.yml'
                }
            }
        }

         }
}
        
    
 
    

